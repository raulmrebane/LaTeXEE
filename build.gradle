description = "LaTeX Extraction Software"

apply plugin: 'java'

ext.versions = [
    junit: "4.10"
]

ext.antlr = [
    grammarpackage: 'main.java.antlrgen',
    antlrSource: 'src/main/antlr',
    destinationDir: "src/main/java/antlrgen"
]


/* Uses online maven central repository at the moment
can be configured to also use locals (in dependencies)
*/
repositories {
    mavenCentral()
}


configurations {
    antlr4
}

dependencies {
    compile group: "org.antlr", name: "antlr4-runtime", version: "4.5.1"
    antlr4 group: "org.antlr", name: "antlr4", version: "4.5.1"
    testCompile group: "junit", name: "junit", version: versions.junit
}

task antlrOutputDir << {
    mkdir(antlr.destinationDir)
}


task generateGrammarSource(dependsOn: antlrOutputDir, type: JavaExec) {
    description = 'Generates Java sources from ANTLR4 grammars.'

    inputs.dir file(antlr.antlrSource)
    outputs.dir file(antlr.destinationDir)

    def grammars = fileTree(antlr.antlrSource).include('**/*.g4')

    main = 'org.antlr.v4.Tool'
    classpath = configurations.antlr4
    def pkg = antlr.grammarpackage.replaceAll("\\.", "/")
    args = ["-o", "${antlr.destinationDir}"/*, "-atn"*/, "-visitor", "-package", antlr.grammarpackage, grammars.files].flatten()

}

jar {
    manifest.attributes 'Main-Class': 'main.java.latexee.runtime.Main'
    // Package runtime to jar.
    from configurations.compile.collect { zipTree it}
}

compileJava {
    dependsOn generateGrammarSource
    source antlr.destinationDir
}

clean {
    delete antlr.destinationDir
}
